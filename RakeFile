COMPILE_TARGET = "release"
require "BuildUtils.rb"
require 'fileutils'

include FileTest

RESULTS_DIR = "results"
DIST_DIR = 'dist'
PRODUCT = "FluentNHibernate"
COPYRIGHT = 'Copyright 2008-2009 James Gregory and contributors (Paul Batum, Andrew Stewart, Chad Myers et al). All rights reserved.';
COMMON_ASSEMBLY_INFO = 'src/CommonAssemblyInfo.cs';
CLR_VERSION = "v3.5"

props = { :archive => "build" }

desc "Compiles, unit tests, generates the database, and then runs integration tests"
task :all => [:default]

desc "**Default**, compiles and runs tests"
task :default => [:use_nhib_201, :compile, :unit_test]

desc "Builds Fluent NHibernate against the NHibernate 2.1 libs (instead of the normal NHibernate 2.0GA"
task :nhib21 =>[:use_nhib_21, :compile, :unit_test, :use_nhib_201]

desc "Switches NHibernate dependencies to NHibernate 2.1"
task :use_nhib_21 do
	switch_nhib_libs('nhib2.1')
end

desc "Switches NHibernate dependencies to NHibernate 2.0.1"
task :use_nhib_201 do	
	switch_nhib_libs('nhib2.0.1GA')
end

#### hidden task, don't call directly
def switch_nhib_libs(nhib_lib_dir)
	puts "Switching NHibernate dependencies to #{nhib_lib_dir}"
	# clear the nhib dir
	Dir.foreach('tools/NHibernate') {|file| 
		relFile = File.join('tools/NHibernate',file)
		File.delete(relFile) if File.file?(relFile)
	}
	
	# copy the source files over
	Dir.foreach("tools/NHibernate/#{nhib_lib_dir}"){|file| 
		relFile = File.join("tools/NHibernate/#{nhib_lib_dir}",file)
		copy(relFile, 'tools/NHibernate') if File.file?(relFile)
	}
end

def get_version
	return ENV['BUILD_NUMBER'].to_s unless ENV['BUILD_NUMBER'].nil?
	return "0.1.0.0"
end

def get_build
  version = get_version
  version.split('.').last
end

desc "Displays a list of tasks"
task :help do
  taskHash = Hash[*(`rake.cmd -T`.split(/\n/).collect { |l| l.match(/rake (\S+)\s+\#\s(.+)/).to_a }.collect { |l| [l[1], l[2]] }).flatten] 
 
  indent = "                          "
  
  puts "rake #{indent}#Runs the 'default' task"
  
  taskHash.each_pair do |key, value|
    if key.nil?  
      next
    end
    puts "rake #{key}#{indent.slice(0, indent.length - key.length)}##{value}"
  end
end

desc "Update the version information for the build"
task :version do
  builder = AsmInfoBuilder.new get_version(),
                               :product => PRODUCT,
                               :copyright => COPYRIGHT,
                               :company => 'http://fluentnhibernate.org',
                               :allow_partially_trusted_callers => true
  buildNumber = builder.buildnumber
  puts "The build number is #{buildNumber}"
  builder.write COMMON_ASSEMBLY_INFO  
end

desc "Prepares the working directory for a new build"
task :clean do
	#TODO: do any other tasks required to clean/prepare the working directory
	Dir.mkdir props[:archive] unless exists?(props[:archive])
end

desc "Compiles the app"
task :compile => [:clean, :version] do
  MSBuildRunner.compile :compilemode => COMPILE_TARGET, :solutionfile => 'src/FluentNHibernate.sln', :clrversion => CLR_VERSION
  outDir = "src/FluentNHibernate/bin/#{COMPILE_TARGET}"
    
  Dir.glob(File.join(outDir, "*.{dll,pdb,xml}")){|file| 
	copy(file, props[:archive]) if File.file?(file)
  }
end

desc "Runs unit tests"
task :unit_test => :compile do
  runner = NUnitRunner.new :compilemode => COMPILE_TARGET, :source => 'src', :platform => 'x86'
  runner.executeTests ['FluentNHibernate.Testing']  
end

desc "Clear built zips"
task :clear_dist do
  FileUtils.rm_rf DIST_DIR if File.exists? DIST_DIR
end

desc "Creates a source zip"
task :create_source_zip do
  puts "Creating source zip"

  Dir.mkdir DIST_DIR unless File.exists? DIST_DIR
  revision = get_build()
  
  create_zip("#{DIST_DIR}/fluentnhibernate-source-#{BUILD_NUMBER}#{revision}.zip", './', /.git|build|dist|results|_ReSharper|bin|obj|.user|.suo|.resharper|.cache/)
end

desc "Create a binary zip"
task :create_binary_zip do
  puts "Creating binary zip"

  Dir.mkdir DIST_DIR unless File.exists? DIST_DIR
  revision = get_build()
  
  create_zip("#{DIST_DIR}/fluentnhibernate-binary-#{BUILD_NUMBER}#{revision}.zip", 'build/')
end

desc "Creates binary and source zip files"
task :create_zips => [:create_source_zip, :create_binary_zip]

desc "Builds the API documentation and puts it in 'output'"
task :build_docs do
  puts "Creating docs"
  
  docu("src/FluentNHibernate/bin/#{COMPILE_TARGET}/FluentNHibernate.dll")
end

desc "Creates a zip of the API documentation"
task :create_zip_docs => :build_docs do
  puts "Creating docs zip"
  Dir.mkdir DIST_DIR unless File.exists? DIST_DIR
  revision = get_build()
  
  create_zip("#{DIST_DIR}/fluentnhibernate-docs-#{BUILD_NUMBER}#{revision}.zip", 'output/')
  
  FileUtils.rm_r('output') if File.exists? 'output'
end
